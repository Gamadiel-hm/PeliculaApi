// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeliculaDb;

#nullable disable

namespace PeliculaDb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231228024431_Soft_Delete")]
    partial class Soft_Delete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PeliculaModel.Entities.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateDelete")
                        .HasColumnType("date");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("PeliculaModel.Entities.Genero", b =>
                {
                    b.Property<int>("GeneroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneroId"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateDelete")
                        .HasColumnType("date");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GeneroId");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("PeliculaModel.Entities.Pelicula", b =>
                {
                    b.Property<int>("PeliculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeliculaId"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateDelete")
                        .HasColumnType("date");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("InView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("Premier")
                        .HasColumnType("date");

                    b.HasKey("PeliculaId");

                    b.ToTable("Peliculas");
                });

            modelBuilder.Entity("PeliculaModel.Entities.PeliculaActor", b =>
                {
                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Charadter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PeliculaId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("PeliculaActors");
                });

            modelBuilder.Entity("PeliculaModel.Entities.PeliculaGenero", b =>
                {
                    b.Property<int>("PeliculaÏd")
                        .HasColumnType("int");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<int?>("PeliculaId")
                        .HasColumnType("int");

                    b.HasKey("PeliculaÏd", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.HasIndex("PeliculaId");

                    b.ToTable("PeliculaGeneros");
                });

            modelBuilder.Entity("PeliculaModel.Entities.PeliculaActor", b =>
                {
                    b.HasOne("PeliculaModel.Entities.Actor", "Actor")
                        .WithMany("PeliculaActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeliculaModel.Entities.Pelicula", "Pelicula")
                        .WithMany("PeliculaActors")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("PeliculaModel.Entities.PeliculaGenero", b =>
                {
                    b.HasOne("PeliculaModel.Entities.Genero", "Genero")
                        .WithMany("PeliculaGeneros")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeliculaModel.Entities.Pelicula", "Pelicula")
                        .WithMany("PeliculaGeneros")
                        .HasForeignKey("PeliculaId");

                    b.Navigation("Genero");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("PeliculaModel.Entities.Actor", b =>
                {
                    b.Navigation("PeliculaActors");
                });

            modelBuilder.Entity("PeliculaModel.Entities.Genero", b =>
                {
                    b.Navigation("PeliculaGeneros");
                });

            modelBuilder.Entity("PeliculaModel.Entities.Pelicula", b =>
                {
                    b.Navigation("PeliculaActors");

                    b.Navigation("PeliculaGeneros");
                });
#pragma warning restore 612, 618
        }
    }
}
